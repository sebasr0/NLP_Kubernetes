AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Zero-Shot Text Classifier full stack (ECS Fargate + RDS + ALB + Secrets Manager).

Parameters:
  EnvName:
    Type: String
    Default: dev
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  DBUsername:
    NoEcho: true
    Type: String
    Default: appuser
  ImageBackend:
    Type: String
    Default: 571600866805.dkr.ecr.us-east-1.amazonaws.com/zeroshot-backend:0.1.2
  ImageFrontend:
    Type: String
    Default: 571600866805.dkr.ecr.us-east-1.amazonaws.com/zeroshot-frontend:0.1.3

Resources:
  # ---------------- VPC & Networking ----------------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: !Sub "${EnvName}-vpc" }]

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${EnvName}-public-1" }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${EnvName}-public-2" }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  SubnetAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ---------------- Security Groups ----------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Fargate tasks
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          SourceSecurityGroupId: !Ref ALBSecurityGroup


  # ---------------- RDS & Secret ----------------
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${EnvName}/db"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":"${DBUsername}"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # SG para RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref FargateSecurityGroup

  MySQLInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: 8.0.36
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBName: zeroshot          # <-- crea la DB al provisionar
      MasterUsername: !Sub "{{resolve:secretsmanager:${DBSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DBSecret}:SecretString:password}}"
      VPCSecurityGroups: [!Ref DBSecurityGroup]
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DB subnet group"
      SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]


  # ---------------- ECS Cluster & IAM ----------------
  ECSCluster:
    Type: AWS::ECS::Cluster

  # --- NO ROLE CREATION ---
  # La cuenta Vocareum expone un rol llamado "LabRole" con permisos predefinidos.
  # Las TaskDefinitions usan ahora ese rol para evitar errores iam:PassRole.

  # ---------------- Task Definitions ----------------
  BackendTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "1024"
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      ContainerDefinitions:
        - Name: backend
          Image: !Ref ImageBackend
          PortMappings:
            - ContainerPort: 8000
          Environment:
            - Name: DB_USER
              Value: !Sub "{{resolve:secretsmanager:${DBSecret}:SecretString:username}}"
            - Name: DB_PASSWORD
              Value: !Sub "{{resolve:secretsmanager:${DBSecret}:SecretString:password}}"
            - Name: DB_HOST
              Value: !GetAtt MySQLInstance.Endpoint.Address
            - Name: DB_PORT
              Value: "3306"
            - Name: DB_NAME
              Value: zeroshot
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend

  FrontendTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref ImageFrontend
          PortMappings:
            - ContainerPort: 8501
          Environment:
            - Name: API_URL
              Value: !Sub "http://${LoadBalancer.DNSName}/api"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend
  # ---------------- Fargate Services ----------------
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref BackendTask
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
          SecurityGroups: [!Ref FargateSecurityGroup]
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !Ref BackendTG

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref FrontendTask
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
          SecurityGroups: [!Ref FargateSecurityGroup]
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 8501
          TargetGroupArn: !Ref FrontendTG

  # ---------------- ALB & Target Groups ----------------
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvName}-alb"
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref ALBSecurityGroup]

  BackendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetType: ip
      HealthCheckPath: "/healthz"
      HealthCheckPort: traffic-port
      Matcher:
        HttpCode: "200"
  FrontendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8501
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetType: ip
      HealthCheckPath: "/_stcore/health"
      HealthCheckPort: traffic-port
      Matcher:
        HttpCode: "200"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref FrontendTG
                Weight: 100

  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values:
            - "/api/*"
            - "/api"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTG

  # ---------------- Logs ----------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${EnvName}/zeroshot"
      RetentionInDays: 7

Outputs:
  ALBURL:
    Description: URL pÃºblica del frontend
    Value: !Sub "http://#{LoadBalancer.DNSName}"
